package com.zqf.exploitvideoplayer;

import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.google.gson.Gson;
import com.shuyu.gsyvideoplayer.GSYPreViewManager;
import com.shuyu.gsyvideoplayer.listener.LockClickListener;
import com.shuyu.gsyvideoplayer.listener.StandardVideoAllCallBack;
import com.shuyu.gsyvideoplayer.utils.OrientationUtils;
import com.shuyu.gsyvideoplayer.video.StandardGSYVideoPlayer;
import com.shuyu.gsyvideoplayer.video.base.GSYVideoPlayer;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class MainActivity extends AppCompatActivity implements StandardVideoAllCallBack {

    @Bind(R.id.gsyvideoplayer)
    StandardGSYVideoPlayer gsyvideoplayer;
    @Bind(R.id.course_before_tv)
    TextView courseBeforeTv;
    @Bind(R.id.course_list_tv)
    TextView courseListTv;
    @Bind(R.id.course_after_tv)
    TextView courseAfterTv;
    @Bind(R.id.courseList_relative)
    RelativeLayout courseListRelative;
    @Bind(R.id.videoplayer_lv)
    ListView videoplayerLv;
    @Bind(R.id.activity_main)
    RelativeLayout activityMain;

    private boolean isPlay;
    private boolean isPause;

    private OrientationUtils orientationUtils;
    private List<VideoPlayerBean.VideoBean> list = new ArrayList<>();

    private String CacheFilePath = Environment.getExternalStorageDirectory()
            .getAbsolutePath() + "/Download/VideoCache/";

    private int position;

    private File file;

    private CourseListAdapter adapter;

    private String mResult;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);
        initVideoFileCache();
        ReadDayDayString();
        initBaseView();
        initVidePlayerView();
    }

    /**
     * 初始化控件
     */
    private void initBaseView() {
        adapter = new CourseListAdapter(list);
        videoplayerLv.setAdapter(adapter);
    }

    /**
     * 初始化播放器的view
     */
    private void initVidePlayerView() {
        //增加视频默认封面
        ImageView imageView = new ImageView(this);
        Glide.with(this).load(list.get(position).getCover())
                .error(R.mipmap.ic_launcher)
                .placeholder(R.mipmap.ic_launcher)
                .into(imageView);
        gsyvideoplayer.setThumbImageView(imageView);

        //增加title
        gsyvideoplayer.getTitleTextView().setVisibility(View.GONE);
        gsyvideoplayer.getTitleTextView().setText(list.get(position).getTitle());
        gsyvideoplayer.getBackButton().setVisibility(View.GONE);

        //外部辅助的旋转，帮助全屏
        orientationUtils = new OrientationUtils(this, gsyvideoplayer);
        //初始化不打开外部的旋转
        orientationUtils.setEnable(false);
        gsyvideoplayer.setIsTouchWiget(true);
        //detailPlayer.setIsTouchWigetFull(false);
        //关闭自动旋转
        gsyvideoplayer.setRotateViewAuto(false);
        gsyvideoplayer.setLockLand(false);
        gsyvideoplayer.setShowFullAnimation(false);
        gsyvideoplayer.setNeedLockFull(true);
        gsyvideoplayer.setSeekRatio(1);
        //detailPlayer.setOpenPreView(false);
        gsyvideoplayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //直接横屏
                orientationUtils.resolveByClick();
                //第一个true是否需要隐藏actionbar，第二个true是否需要隐藏statusbar
                gsyvideoplayer.startWindowFullscreen(MainActivity.this, true, true);
            }
        });

        //播放
        gsyvideoplayer.setUp(list.get(position).getUrl(), true, file, list.get(position).getTitle());
        //回调接口
        gsyvideoplayer.setStandardVideoAllCallBack(this);
        //锁的监听
        gsyvideoplayer.setLockClickListener(new LockClickListener() {
            @Override
            public void onClick(View view, boolean lock) {
                if (orientationUtils != null) {
                    //配合下方的onConfigurationChanged
                    orientationUtils.setEnable(!lock);
                }
            }
        });
        //listview item点击事件
        videoplayerLv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                if (position == i) {
                    return;
                }
                //得到当前播放时间
                Log.e("Tag", "是否有存储的时间-->" + App.getSP().getInt(list.get(i).getUrl(), 0) + "");
                Log.e("Tag", "点击positon-->" + position);
                Log.e("Tag", "点击i->" + i);
                int CurrentPositionWhenPlaying = gsyvideoplayer.getCurrentPositionWhenPlaying();
                App.getSP().put(list.get(position).getUrl(), CurrentPositionWhenPlaying);
                if (App.getSP().getInt(list.get(i).getUrl(), 0) != 0) {
                    Log.e("Tag", "从上一次记录时间播放->");
                    gsyvideoplayer.setUp(list.get(i).getUrl(), true, file, list.get(i).getTitle());
                    gsyvideoplayer.setSeekOnStart(App.getSP().getInt(list.get(i).getUrl()));
                    gsyvideoplayer.startPlayLogic();
                } else {
                    Log.e("Tag", "点击视频地址-->" + list.get(i).getUrl());
                    Log.e("Tag", "存储的上一个视频时间-->" + CurrentPositionWhenPlaying);
                    gsyvideoplayer.setUp(list.get(i).getUrl(), true, file, list.get(i).getTitle());
                }
                position = i;
            }
        });
    }

    @Override
    public void onBackPressed() {
        if (orientationUtils != null) {
            orientationUtils.backToProtVideo();
        }
        if (StandardGSYVideoPlayer.backFromWindowFull(this)) {
            return;
        }
        super.onBackPressed();
    }

    /**
     * 解析数据源
     */
    private void initData() {
        try {
            Gson gson = new Gson();
            VideoPlayerBean bean = gson.fromJson(mResult, VideoPlayerBean.class);
            if (bean.getStatuscode() == 200) {
                list.addAll(bean.getVideo());
                Log.e("Tag", "大小" + list.size());
                adapter.notifyDataSetChanged();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 创建缓存的文件路径
     */
    private void initVideoFileCache() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                Log.e("Tag", "执行");
                file = new File(CacheFilePath);
                if (!file.exists()) {
                    Log.e("Tag", "创建文件夹");
                    file.mkdirs();
                }
            }
        }).start();
    }

    @OnClick({R.id.course_before_tv, R.id.course_after_tv})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.course_before_tv:
                //上一节
                if (position > 0) {
                    position--;
                    gsyvideoplayer.setUp(list.get(position).getUrl(), true, file, list.get(position).getTitle());
                }
                break;
            case R.id.course_after_tv:
                //下一节
                if (position != list.size() - 1) {
                    position++;
                    gsyvideoplayer.setUp(list.get(position).getUrl(), true, file, list.get(position).getTitle());
                }
                break;
        }
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        //如果旋转了就全屏
        if (isPlay && !isPause) {
            if (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_USER) {
                if (!gsyvideoplayer.isIfCurrentIsFullscreen()) {
                    gsyvideoplayer.startWindowFullscreen(MainActivity.this, true, true);
                }
            } else {
                //新版本isIfCurrentIsFullscreen的标志位内部提前设置了，所以不会和手动点击冲突
                if (gsyvideoplayer.isIfCurrentIsFullscreen()) {
                    StandardGSYVideoPlayer.backFromWindowFull(this);
                }
                if (orientationUtils != null) {
                    orientationUtils.setEnable(true);
                }
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        isPause = false;
    }

    @Override
    protected void onPause() {
        super.onPause();
        isPause = true;
    }

    @Override
    protected void onStop() {
        super.onStop();
        int CurrentState = gsyvideoplayer.getCurrentState();
        Log.e("Tag", CurrentState + "");
        if (CurrentState == 0 || CurrentState == 5 || CurrentState == 2) {
            App.getSP().put(list.get(position).getUrl(), gsyvideoplayer.getCurrentPositionWhenPlaying());
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        GSYVideoPlayer.releaseAllVideos();
        GSYPreViewManager.instance().releaseMediaPlayer();
        if (orientationUtils != null) {
            orientationUtils.releaseListener();
        }
    }

    @Override
    public void onPrepared(String url, Object... objects) {
        //开始播放了才能旋转和全屏
        orientationUtils.setEnable(true);
        isPlay = true;
        Log.e("Tag", "开始onPrepared");
    }

    @Override
    public void onClickStartIcon(String url, Object... objects) {
        Log.e("Tag", "onClickStartIcon");
    }

    @Override
    public void onClickStartError(String url, Object... objects) {
        Log.e("Tag", "onClickStartError");
    }

    @Override
    public void onClickStop(String url, Object... objects) {
        Log.e("Tag", "onClickStop");
    }

    @Override
    public void onClickStopFullscreen(String url, Object... objects) {
        Log.e("Tag", "onClickStopFullscreen");
    }

    @Override
    public void onClickResume(String url, Object... objects) {
        Log.e("Tag", "onClickResume");
    }

    @Override
    public void onClickResumeFullscreen(String url, Object... objects) {
        Log.e("Tag", "onClickResumeFullscreen");
    }

    @Override
    public void onClickSeekbar(String url, Object... objects) {
        Log.e("Tag", "onClickSeekbar");
    }

    @Override
    public void onClickSeekbarFullscreen(String url, Object... objects) {
        Log.e("Tag", "onClickSeekbarFullscreen");
    }

    @Override
    public void onAutoComplete(String url, Object... objects) {
        Log.e("Tag", "onAutoComplete");
    }

    @Override
    public void onEnterFullscreen(String url, Object... objects) {
        Log.e("Tag", "onEnterFullscreen");
    }

    @Override
    public void onQuitFullscreen(String url, Object... objects) {
        if (orientationUtils != null) {
            orientationUtils.backToProtVideo();
        }
    }

    @Override
    public void onQuitSmallWidget(String url, Object... objects) {

    }

    @Override
    public void onEnterSmallWidget(String url, Object... objects) {

    }

    @Override
    public void onTouchScreenSeekVolume(String url, Object... objects) {

    }

    @Override
    public void onTouchScreenSeekPosition(String url, Object... objects) {

    }

    @Override
    public void onTouchScreenSeekLight(String url, Object... objects) {

    }

    @Override
    public void onPlayError(String url, Object... objects) {
        Log.e("Tag", "onPlayError");
    }

    @Override
    public void onClickStartThumb(String url, Object... objects) {
        Log.e("Tag", "onClickStartThumb");
    }

    @Override
    public void onClickBlank(String url, Object... objects) {
        Log.e("Tag", "onClickBlank");
    }

    @Override
    public void onClickBlankFullscreen(String url, Object... objects) {
        Log.e("Tag", "onClickBlankFullscreen");
    }

    //读取本地JSON字符
    private void ReadDayDayString() {
        InputStream is = null;
        try {
            is = getResources().getAssets().open("courselist.txt");
            byte[] bytes = new byte[is.available()];
            is.read(bytes);
            mResult = new String(bytes);
            initData();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
